resource "scaleway_instance_ip" "temp_instance_ip" {
}

resource "scaleway_instance_volume" "temp_instance_block_volume2" {
  type       = "b_ssd"
  name       = "gpu_scratch_volume"
  size_in_gb = 3940
}

resource "scaleway_instance_server" "temp_instance" {
  name  = "temp_cpu_instance"
  type  = "DEV1-L"
  image = "ubuntu_focal"
  tags  = local.resources_tags
  root_volume {
    volume_type = "b_ssd"
    size_in_gb  = 500
  }
  ip_id             = scaleway_instance_ip.temp_instance_ip.id
  security_group_id = scaleway_instance_security_group.temp_access_sg.id
  additional_volume_ids = [scaleway_instance_volume.temp_instance_block_volume2.id]
}

resource "scaleway_instance_security_group" "temp_access_sg" {
  inbound_default_policy  = "drop"
  outbound_default_policy = "accept"

  dynamic "inbound_rule" {
    for_each = var.users_ips_lists
    content {
      action   = "accept"
      #ip_range = "${inbound_rule.value}/32"
      ip_range = "0.0.0.0/0"
    }
  }
}


/*
resource "scaleway_instance_ip" "temp_instance_ip2" {
}

resource "scaleway_instance_volume" "temp_instance_block_volume" {
  type       = "b_ssd"
  name       = "gpu_scratch_volume"
  size_in_gb = 3940
}

resource "scaleway_instance_server" "temp_instance2" {
  name  = "temp_cpu_instance2"
  type  = "DEV1-S"
  image = "ubuntu_focal"
  tags  = local.resources_tags
  root_volume {
    volume_type = "b_ssd"
    size_in_gb  = 500
  }
  ip_id                 = scaleway_instance_ip.temp_instance_ip2.id
  security_group_id     = scaleway_instance_security_group.temp_access_sg2.id
  additional_volume_ids = [scaleway_instance_volume.temp_instance_block_volume.id]
  user_data = {
    cloud-init = <<-EOT
    #cloud-config
    bootcmd:
      - apt-get update
      - mkfs.ext4 /dev/sdb
      - mkdir -p /scratch-volume
    mounts:
      - [ "/dev/sdb", "/scratch-volume", "ext4", "defaults,nofail", "0", "2" ]
    EOT
  }
}

resource "scaleway_instance_security_group" "temp_access_sg2" {
  inbound_default_policy  = "drop"
  outbound_default_policy = "accept"

  dynamic "inbound_rule" {
    for_each = var.users_ips_lists
    content {
      action = "accept"
      //ip_range="${inbound_rule.value}/32"
      ip_range = "0.0.0.0/0"
    }
  }
}*/